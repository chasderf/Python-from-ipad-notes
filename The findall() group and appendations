The findall ( ) function returns a list containing all matches

Import re
Txt = “the rain in Spain”
X = re.findall (“ai” , txt )
Print ( x)

The list contains the matches in the order they are found
If no matches. Are found, an empty list is returned
Return an empty list if no match was foound by the alignment of the txt variable and the
X = re.findall ( “Portugal”, txt )

The search ( ) function
The search ( ) function searches the string for a match and returns a match object if there is a match

If there is more than one match, only the first occurence of the match will be returned:
Search for the first white space character in the string
Import re
Txt = “the resin in spain”
X = re.search(“\s” , txt )
Print (“The first white space character is located in position: “ , x.start ( ) )

If no matches are found, the value none is returned

Import re
Txt = “the rain in spain”
X = re.search(“Portugal” , txt )
Print ( x )

The split ( ) function
The split ( ) function returns a list where the string has been split at each match

Split at each white space character
//input
Import re
Txt = “the rain in Spain”
X = re.split ( “\s” , txt )
Print ( x )

You can control the number of occurance s by specifying the max spoilt parameter

Split the string only at the first occurence

//INPUT
Import re
Txt = “the rain in Spain”
X = re.split ( “\s” , txt , 1)
Print ( x )
//OUTPUT

The sub ( ) function
The sub ( ) funciton replaces the matches with the text of your choice :

//INPUT
Import re
Txt = “the rain in Spain”
X = re.sub ( “\s” , “9” , txt)
Print ( x )
//OUTPUT

You can control the number of replacements by specyfing the count parameter

Match object
A match object is an object containing information about the search and the result
Note : if there is not match, the value NONE will be returned, instead of the match object

The match object has properties and methods used to retrieve information about the search, and
the result:
.span ( ) returns a tuple containing the start - and end positions of the match
.string returns the string passed into the function
.group ( ) returns the part of the string where there was a match

Note: if there is no match, the value none will be returned instead of the match object
